{
  
    
        "post0": {
            "title": "Que nous dit le nombre de cas sur la dangerosité du COVID-19?",
            "content": "Ce blog post est mon deuxième sur l’évolution du COVID-19 en France, où le premier cherchait à extraire des métriques qui indiquerait de manière robuste la trajectoire du coronavirus, dans ce deuxième nous cherchons à comprendre ce que l’on peut apprendre du nombre de « cas confirmés ». Connaitre le nombre de cas à un moment donné et son évolution dans le temps permet de comprendre la dangerosité du SARS-CoV-2 et de calculer les taux de reproduction de la maladie (R). . Malheureusement comparé aux nombres d’hospitalisations, de réanimations et de décès ; le nombre de personne ayant le COVID-19 à un moment donné est très incertain. En effet le nombre de cas confirmés ne capture pas tous les cas : . Lorsque le nombre de tests est limité, seul les cas critiques sont testés ; | Il est maintenant documenté que le test PCR peut apparaitre négatif pour une personne infectée ; | Les asymptomatiques ne sont testés que dans le contexte de dépistage massif et de l’établissement de chaînes de contacts. | . De plus, ces facteurs ont changé au cours de la pandémie. Nous allons tenter de comprendre comment ces facteurs ont évolué pendant la durée de la pandémie. . import pandas as pd from matplotlib import pyplot as plt import requests import datetime from IPython.display import display, Markdown import viz . . display(Markdown(&quot;Article publié le 18/10/2020&quot;)) display(Markdown(&quot;Article mis à jour le {}&quot;.format(datetime.date.today().strftime(&quot;%d/%m/%Y&quot;)))) . . Article publié le 18/10/2020 . Article mis à jour le 27/11/2020 . from viz import * import viz . . file_name = &#39;opencovid19-fr-chiffres-cles.csv&#39; url = &#39;https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv&#39; myfile = requests.get(url) open(file_name, &#39;wb&#39;).write(myfile.content) data = pd.read_csv(&#39;opencovid19-fr-chiffres-cles.csv&#39;) data = enable_time_series_plot(data, timein_field=&quot;date&quot;, timeseries_field_out=&quot;t&quot;) . . maille_active = &#39;FRA&#39; fra, name = oc19_data_preparation(data, maille_active) # Personne tombant malade le 5 Main: fra[&quot;test&quot;] = 0 fra.loc[&quot;2020-05-01&quot;,&quot;test&quot;] = 1 . . Mise &#224; jour des observations . Mise &#224; jour du 14/11/2020 . Les estimations de mortalité en réanimation pour le mois d&#39;Octobre, Novembre on atteint le même pic que ceux du mois d&#39;Avril. L&#39;augmentation rapide de la mortalité rapide en réanimation n&#39;a pas etait suivi d&#39;une augmentation de la mortalité à l&#39;hôpital aussi rapide. Cela semble du à une réduction de la proportion de transfert en réanimation des personnes hospitalisées pour limiter l&#39;utilisation des services aux cas les plus extrèmes. . Approximation du nombre de malades &#224; un moment donn&#233;e . La première étape est d&#39;établir une estimation du nombre de personne ayant le COVID-19 à un moment donné à partir du nombre de cas confirmés. Pour se faire nous avons besoin d’estimer la durée de la maladie. Les études de l’institut pasteur donnent une maladie qui en moyenne dure 21 jours, 5 avant l’apparition des symptômes, et 16 après. Nous allons partir du principe que la maladie est confirmée officiellement 2 jours après l’apparition des symptômes. Une personne est donc considérée malade 7 jours avant son test et jusqu’à 14 jours après. . jour_de_contamination_avant_le_résultat = 7 durée_totale_de_la_maladie = 21 state_start = - jour_de_contamination_avant_le_résultat state_end = durée_totale_de_la_maladie + state_start malades = viz.state_tracking(fra, state_start, state_end) disease_states = pd.DataFrame() disease_states[&quot;malades&quot;] = malades[&quot;cas_confirmes_jour&quot;] . . Prennons l&#39;exemple d&#39;une personne dont le cas est confirmé le 1er Mai: . ax = malades[&quot;test&quot;].plot(label=&quot;Période de maladie&quot;) fra[&quot;test&quot;].plot(ax=ax, label=&quot;Test positif COVID-19&quot;) ax.legend() ax.figure.set_size_inches(6, 2) axis_date_limits(ax,&#39;2020-04-15&#39;, &#39;2020-05-22&#39;) . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Notre estimation la considère malade du 24/04 au 14/05. . Maintenant comparons notre estimation du nombre de malades au nombre de cas confirmé par jour: les deux se suivent mais le pic du nombre de malades intervient quelques jours après le pic du nombre de nouveaux cas. . cas = pd.DataFrame() cas[&quot;éstimation du nombre de malades&quot;] = disease_states[&quot;malades&quot;] cas[&quot;Cas confirmés par jour&quot;] = fra[&quot;cas_confirmes_jour&quot;].rolling(7, center=True).mean() ax = cas.plot(secondary_y=[&quot;Cas confirmés par jour&quot;]) ax.grid() . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Comparaison aux nombres d&#39;hospitalisations, r&#233;animations et d&#233;c&#232;s . Nous savons tous que pendant la première vague de la maladie la France n&#39;avait pas suffisamment de capaciter de test, et en dépister pratiquement que les cas graves. . disease_states = pd.DataFrame() disease_states[&quot;malades&quot;] = malades[&quot;cas_confirmes_jour&quot;] extract = [ &quot;hospitalises&quot;,&quot;reanimation&quot;,&quot;deces_jour&quot;,&quot;cas_confirmes_jour_mma&quot;,] disease_states[extract] = fra[extract] disease_states[&quot;deces_jour&quot;] = disease_states[&quot;deces_jour&quot;].rolling(&quot;7d&quot;).mean() pop_france_par_100000 = 670 disease_states = disease_states / pop_france_par_100000 . . ci-dessous nous représentons l&#39;évolution du nombre de malade dans un états donné de maladie COVID pour 100.000 habitants. De ce graphique il est évident que l&#39;information communiqué par le nombre de cas à évoluer au cours de l&#39;épidémie: le rapport entre les courbes du nombre de malade à complétement changer au cours des 6 derniers mois. . name_map = { &quot;malades&quot;:&quot;Estimation du nombre de malades&quot;, &quot;cas_confirmes_jour_mma&quot;:&quot;Cas confirmés par jour (moyenne 7j)&quot;, &quot;hospitalises&quot;: &quot;Hospitalisés&quot;, &quot;reanimation&quot;: &quot;En réanimation&quot;, &quot;deces_jour&quot;:&quot;Décès par jour&quot;, } ax = disease_states.rename(name_map, axis=&quot;columns&quot;).plot() ax.set_yscale(&quot;log&quot;) ax.set_ylabel(&quot;Nombre de personne affectées n par 100.000 habitants&quot;) ax.set_title(&quot;Comparaison de l&#39;évolution des différents états nde la maladie COVID-19&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick)) ax.set_ylim(0.001, 10000) leg = ax.legend(ncol=2) leg.set_bbox_to_anchor((0.2, -0.25)) ax.grid(which=&quot;major&quot;) ax.figure.set_size_inches(9, 5) . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; cols = [ &quot;malades&quot;, &quot;hospitalises&quot;, &quot;reanimation&quot;, &quot;deces_jour&quot;, ] proportions = pd.DataFrame() for col in cols: proportions[col] = (disease_states[col] / disease_states[&quot;malades&quot;]) proportions_rea = pd.DataFrame() for col in cols: proportions_rea[col] = (disease_states[col] / disease_states[&quot;reanimation&quot;]) . . Pour mieux visualiser cette évolution, nous affichons le rapport entre les états graves et le nombre de malades supposés. . fig, axs = plt.subplots(1, 2) fig.set_size_inches(12, 6) fig.suptitle(&quot;évolution de la prévalence relative des différents états n de la maladie COVID-19&quot;) ax = axs[0] proportions.rename(name_map, axis=&quot;columns&quot;).plot(ax=ax) ax.set_yscale(&quot;log&quot;) ax.set_ylabel(&quot;Proportion relative au nombre de malades estimés [%]&quot;) leg = ax.legend(ncol=2) leg.set_bbox_to_anchor((0.5, -0.2)) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;both&quot;) ax = axs[1] proportions_rea.rename(name_map, axis=&quot;columns&quot;).plot(ax=ax) ax.set_yscale(&quot;log&quot;) ax.set_ylabel(&quot;Proportion relative au nombre de réanimations&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_multi)) ax.grid(which=&quot;both&quot;) ax.get_legend().remove() . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Sur ce graphique nous voyons clairement le manque de test pendant la première vague de la pandémie où le nombre de malade supposé devient même inférieur au nombre de personnes hospitalisées. Cet effet est bien sûr un artefact du au manque de tests mais illustre bien ce déficit d’infrastructure. Plusieurs hypothèses existent pour expliquer ensuite la baisse très importante du nombre de cas grave par cas avérés : . Tout d’abord faisant plus de tests, nous trouvons plus de cas, et notamment des cas moins graves sont maintenant confirmés. Ceci est en ligne avec les politiques de dépistage massif et l’accès au test qui devint facile au cours de la période Juillet-Août. | Autre explication plausible est que des personnes plus jeunes et donc moins susceptible aux complications soit maintenant le vecteur principal de l’épidémie. | Finalement il est possible qu’une mutation du virus l’ai rendu moins virulent, mais les informations présentées ici ne sont pas du tout suffisante pour analyser cette possibilité. | . Ces données seules ne sont pas suffisantes pour dégager la responsabilité de chacun de ces effets ; une analyse de l’âge des malades et du nombre de test serait nécessaire. . Il est intéressant de remarquer que le rapport entre le nombre de malade et le nombre de personnes dans un états grave dû au COVID-19 n&#39;a cessé de décroître jusqu&#39;à début Septembre pour atteindre 300(malades):1(réanimation), et stagne ou remonte doucement depuis. . Cette stagnation peut-être signe que tous les cas sont détectés par le système de traçage des contacts, ou que la deuxième prend le pas sur notre capacité de tests. . Estimation des param&#232;tres &#233;pid&#233;miologiques . En utilisant les ratios de la figure précedente et quelques assomptions sur la durée de la maladie il est possible d&#39;estimer le taux de mortalité du COVID-19. Nous allons estimer successivement le risque de passer dans un état plus grave de la maladie: . risque de décédé en réanimation; | risque de réanimaton en hopital; | risque d&#39;hospitalisation lorsque malade. | . Mortalit&#233; en r&#233;animation . Tous d&#39;abord estimons la probabilité de décès pour une personne en réanimation. Partant de l&#39;assomption que les décès proviennent en grande majorité des personnes en réanimation, sur le graphique précédent nous avons une notion du risque &quot;journalier&quot; pour une personne en réanimation qui a fluctué de 8% en Avril à 2% (en Juillet) et de retour à 5% en Octobre. . Estimant le nombre moyen de jours en réanimation à 10 : Nous obtiendrons donc un taux de mortalité entre 20 et 80% pour les personnes en réanimation. . jours_en_rea = 10 ax = proportions_rea.rolling(jours_en_rea, center=True).sum().plot( y=&quot;deces_jour&quot;, label=&quot;Estimation de la mortalité en réanimation&quot; ) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;both&quot;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Les nombres en Avril paraissent extrèmes car la supposition que tous les décès étaient en réanimation est certainement fausse durant le premier pic de la maladie. . 50% de mortalité en réanimation n&#39;est pas surprenant et est en ligne avec les nombres publiés au début de l&#39;épidémie. . Ces données supporte l&#39;hypothèse d&#39;une amélioration du traitement durant l&#39;été et lorsque les systèmes de santé étaient moins surchargés. . Conscient que l&#39;estimation de 10 jours est grossière la même estimation est présentée pour 8 et 12 jours ci-dessous: . mortalite_rea = pd.DataFrame() for idx in [jours_en_rea, jours_en_rea-2, jours_en_rea+2]: mortalite_rea[f&quot;{idx} jours&quot;] = proportions_rea[&quot;deces_jour&quot;].rolling(idx, center=True).sum() ax = mortalite_rea.plot() ax.set_title(&quot;Estimation de la mortalité en réanimation&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;both&quot;) leg = ax.get_legend() leg.set_title(&quot;Durée en réanimation&quot;) . . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Risque d&#39;entrer en r&#233;animation . Suivant le même processus calculons la probabilité de passer en réanimation une fois hospitalisé. . Vu que hospitalisations et réanimations sont des données de même type il n&#39;est pas necessaire de cumuler sur plusieurs jours. Nous partons donc de l&#39;hypothèse que le ratio entre réanimation et hospitalisations indique le risque d&#39;une personne hospitalisé. . risque_rea = (1.0/proportions_rea[&quot;hospitalises&quot;]).loc[&#39;2020-03-17&#39;:] ax = risque_rea.plot() ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;major&quot;) ax.set_ylabel(&quot;Risque de réanimation pour personne hospitalisée&quot;) . Text(0, 0.5, &#39;Risque de réanimation pour personne hospitalisée&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Cette variation du taux d&#39;hospitalisation/réanimation n&#39;est pas explicable avec les données analysées ici. Dans mon post précédent on observe que le nombre d&#39;hospitalisés n&#39;est jamais redescendu aussi bas que le nombre de cas ou de réanimation. Cela suggère un effet de la maladie qui n&#39;est pas capturé par nos suppositions. . En multipliant ce risque hospitalisation/réanimation au taux de mortalité en réanimation nous pouvons calculer un taux de mortalité en hôpital: celui ci était de 15% pendant le premier pic et oscille autour de 7% en ce moment. . mortalite_hos = pd.DataFrame() for col in mortalite_rea: mortalite_hos[col] = risque_rea * mortalite_rea[col] . ax = mortalite_hos.plot() ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;major&quot;) ax.set_ylabel(&quot;Mortalité pour personne hospitalisée&quot;) . Text(0, 0.5, &#39;Mortalité pour personne hospitalisée&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Risques pour une personne malade . Suivant le même processus nous pouvons estimé le taux de mortalité . risque_hosp = (proportions[&quot;hospitalises&quot;]).loc[&#39;2020-03-17&#39;:] ax = risque_hosp.plot() ax.grid(which=&quot;major&quot;) ax.set_ylabel(&quot;Risque d&#39;hospitalisation pour personne hospitalisée&quot;) ax.set_yscale(&quot;log&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_multi)) ax.yaxis.grid(which=&quot;both&quot;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; mortalite_malade = pd.DataFrame() for col in mortalite_hos: mortalite_malade[col] = risque_hosp * mortalite_hos[col] . ax = mortalite_malade.loc[&#39;2020-03-17&#39;:].plot() ax.set_yscale(&quot;log&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;major&quot;) ax.yaxis.grid(which=&quot;both&quot;) ax.set_ylabel(&quot;Mortalité pour personne malade&quot;) . Text(0, 0.5, &#39;Mortalité pour personne malade&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; ax = mortalite_malade[&quot;10 jours&quot;].loc[&#39;2020-03-17&#39;:].plot() ax.set_yscale(&quot;log&quot;) ax.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick_percent)) ax.grid(which=&quot;major&quot;) ax.yaxis.grid(which=&quot;both&quot;) ax.set_ylabel(&quot;Mortalité pour personne malade&quot;) ax2 = ax.twinx() disease_states[&quot;deces_jour&quot;].loc[&#39;2020-03-17&#39;:].plot(ax=ax2, ls=&quot;--&quot;, label=&quot;décès par jours (droite)&quot;) ax2.set_yscale(&quot;log&quot;) ax2.yaxis.set_major_formatter(mtick.FuncFormatter(format_tick)) ax2.set_ylabel(&quot;Nombre de décès par jour par 100,000 habitants&quot;) leg = ax.figure.legend(loc=&quot;lower left&quot;) leg.set_bbox_to_anchor((0.115, 0.17)) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;",
            "url": "https://payoto.github.io/blog/visualisation/data/covid/2020/10/18/taux-de-malades.html",
            "relUrl": "/visualisation/data/covid/2020/10/18/taux-de-malades.html",
            "date": " • Oct 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Analyse graphique de la dynamique epidemique du COVID-19 en France",
            "content": "Ce post présente la dynamique de l&#39;épidémie et propose des graphiques montrant différentes normalisations des données permettant de mesurer les variations de la vitesse de propagation du virus. . J&#39;ai commencé ce projet en avril 2020, lorsque la dynamique de l&#39;épidémie était très incertaine, durant le confinement en France. Mon objectif est de mettre à jour les données toutes les semaines pour permettre un suivi des chiffres loin du sensationnalisme et des sous-estimations que l&#39;on peut retrouver dans les médias. . Dans ce contexte, l&#39;accent est mis sur les données pondérées sur 7 jours, ce qui permet de lisser les fluctuations importantes que l&#39;on observe entre les différents jours de la semaine. Vous retrouverez le code utilisé à l&#39;adresse suivante : payoto/covid19-viz . import pandas as pd from matplotlib import pyplot as plt import requests import datetime from IPython.display import display, Markdown import viz . . display(Markdown(&quot;Article mis à jour le {}&quot;.format(datetime.date.today().strftime(&quot;%d/%m/%Y&quot;)))) . Article mis à jour le 27/11/2020 . Mise &#224; jour des commentaires . Le 27/11/2020 . Le pic de décès, réanimation et hospitalisations ne fut atteint que le 16 Novembre les indicateurs indiquent une amélioration marquée. Lq deuxième vague aura eu une ampleur très similaire à la première vague. . Le 14/11/2020 . Le deuxième confinement a fait son effet et le nombre de cas et de décès ont atteint leur pic dans la semaine du 2 et 9 Novembre respectivement. Le pic de réanimation et hospitalisations est attendu dans les jours à venir. . Le 25/10/2020 . Les tendances sont similaires à la semaine dernière et restent inquiétantes. . Malgré on observe un ralentissement du nombre de décès (pic a +10%/jour le 18/10/2020). à cause des différentes moyennes glissantes les nombres pour cette semaine ne sont pas encore définitifs. Ce ralentissement est important car de manière contre-intuitive le pic de décès lors de la première vague intervint avant le pic de réanimation et le pic d&#39;hospitalisations. . L&#39;augmentation du nombre de cas reste stable à +5% par jour. Cette indicateurs n&#39;est pas fiable vu le taux de positivité des tests. (~14%) . Le 17/10/2020 . Tous les indicateurs montrent une croissance exponentielle de la maladie et une deuxième vague sérieuse se profile. . Le taux d&#39;accroissement journalier +5% pour tous les indicateurs. . Le 11/10/2020 . Nous observons sur les trois dernières semaines une stabilisation du nombre de réanimation : nous observons une augmentation linéaire de 25 personnes en réanimation par jour. C&#39;est un signe encourageant qui suggère que l&#39;épidémie a ralenti il y a quelques semaines. Malheureusement ceci ne nous donne pas d&#39;information sur la trajectoire des deux dernières semaines. | Ajout du nombre de cas aux graphiques concernant la France. | . Le 27/09/2020 . Aujourd&#39;hui une vue agrandie sur les dernières semaines est ajoutée. . Nous observons un phénomène surprenant d&#39;une baisse de nombre de personne à l&#39;hôpital, cela semble être un phénomène externe qui ne correspond pas à la dynamique de la maladie ; | un relativement grand nombre de décès le 18/09 (80) sort de la tendance en cours. | . Le 20/09/2020 . Deux points importants apparaissent dans les données : . L&#39;augmentation du nombre de personne en réanimation et hôpital semble se stabiliser autour de +5% par jour (doublement toutes les deux semaines) ; | Sans surprise, les tendances en réanimations et hospitalisations commencent à apparaître dans les courbes de décès. | . from viz import * . Donn&#233;es de DataAgainst Covid-19 . Les données utilisées sont celles de DataAgainst COVID-19 (aka opencovid19-fr) [github.com/opencovid19-fr/data]. Elles sont mises à jour quotidiennement. . file_name = &#39;opencovid19-fr-chiffres-cles.csv&#39; url = &#39;https://raw.githubusercontent.com/opencovid19-fr/data/master/dist/chiffres-cles.csv&#39; myfile = requests.get(url) open(file_name, &#39;wb&#39;).write(myfile.content) data = pd.read_csv(&#39;opencovid19-fr-chiffres-cles.csv&#39;) . . data.tail() . date granularite maille_code maille_nom cas_confirmes cas_ehpad cas_confirmes_ehpad cas_possibles_ehpad deces deces_ehpad reanimation hospitalises nouvelles_hospitalisations nouvelles_reanimations gueris depistes source_nom source_url source_archive source_type . 34000 2020-11-27 | region | REG-76 | Occitanie | NaN | NaN | NaN | NaN | 1631.0 | NaN | 304.0 | 1722.0 | 78.0 | 8.0 | 8269.0 | NaN | OpenCOVID19-fr | NaN | NaN | opencovid19-fr | . 34001 2020-11-27 | region | REG-84 | Auvergne-Rhône-Alpes | NaN | NaN | NaN | NaN | 5077.0 | NaN | 695.0 | 5706.0 | 276.0 | 43.0 | 21957.0 | NaN | OpenCOVID19-fr | NaN | NaN | opencovid19-fr | . 34002 2020-11-27 | region | REG-93 | Provence-Alpes-Côte d&#39;Azur | NaN | NaN | NaN | NaN | 2716.0 | NaN | 403.0 | 2722.0 | 152.0 | 17.0 | 15370.0 | NaN | OpenCOVID19-fr | NaN | NaN | opencovid19-fr | . 34003 2020-11-27 | region | REG-94 | Corse | NaN | NaN | NaN | NaN | 109.0 | NaN | 9.0 | 46.0 | 3.0 | 1.0 | 466.0 | NaN | OpenCOVID19-fr | NaN | NaN | opencovid19-fr | . 34004 2020-11_11 | pays | FRA | France | 1865538.0 | NaN | NaN | NaN | 29272.0 | 13263.0 | 4803.0 | 31946.0 | 2588.0 | 351.0 | 133696.0 | NaN | Ministère des Solidarités et de la Santé | NaN | NaN | ministere-sante | . data = enable_time_series_plot(data, timein_field=&quot;date&quot;, timeseries_field_out=&quot;t&quot;) . Derni&#232;res donn&#233;es pour la France . Ici, nous tabulons les derniers jours de données pour la France. Les données brutes ainsi que les données avec une moyenne glissante sur 7 jours sont calculées. Nous n&#39;observons que les réanimations, les hospitalisations et les décès. Les données de cas confirmés ont longtemps été insuffisantes pour permettre une analyse intelligente de l&#39;épidémie. . Dans les graphiques ci-après nous analysons trois types de données : . les données brutes d&#39;entrées en réanimation et de décès ; | ces même données pondérées sur 7 jours ; | ces données pondérées normalisée par le nombre de personnes en réanimation. | . Ce troisième graphique donne donc une indication de l&#39;accélération ou ralentissement, même lorsque les données sont d&#39;ampleurs très différentes. . maille_active = &#39;FRA&#39; fra = oc19_data_preproc(data, maille_active) fra.tail(10) . . deces deces_ehpad reanimation hospitalises cas_confirmes reanimation_cumul hospitalises_cumul deces_jour deces_jour_jour deces_ehpad_jour ... deces_ehpad_jour_mma_jour deces_jour_prop deces_ehpad_jour_prop reanimation_jour_prop hospitalises_jour_prop cas_confirmes_jour_prop reanimation_cumul_jour_prop hospitalises_cumul_jour_prop reanimation_solde_vivant_jour_prop deces_jour_mma_jour_prop . t . 2020-11-18 32168.0 | 14530.0 | 4775.0 | 32842.0 | 2065138.0 | 513782.0 | 3442114.0 | 425.0 | -3.0 | 0.0 | ... | 0.000000 | 0.012861 | 0.012457 | -0.000838 | 0.003897 | 0.013807 | 0.009486 | 0.009566 | 0.085804 | 0.033494 | . 2020-11-19 32597.0 | 14530.0 | 4653.0 | 32345.0 | 2086288.0 | 518435.0 | 3474459.0 | 429.0 | 4.0 | 0.0 | ... | 0.000000 | 0.012709 | 0.012457 | -0.007553 | -0.001493 | 0.012844 | 0.009333 | 0.009463 | 0.081484 | 0.001379 | . 2020-11-20 32978.0 | 15287.0 | 4582.0 | 31906.0 | 2109170.0 | 523017.0 | 3506365.0 | 381.0 | -48.0 | 757.0 | ... | 40.142857 | 0.012238 | 0.014466 | -0.010008 | -0.003586 | 0.012643 | 0.009164 | 0.009344 | 0.078069 | -0.026549 | . 2020-11-21 33231.0 | 15287.0 | 4509.0 | 31197.0 | 2127051.0 | 527526.0 | 3537562.0 | 253.0 | -128.0 | 0.0 | ... | 0.000000 | 0.011710 | 0.014466 | -0.011469 | -0.005962 | 0.011582 | 0.008988 | 0.009209 | 0.074834 | -0.037078 | . 2020-11-22 33445.0 | 15287.0 | 4509.0 | 31554.0 | 2140208.0 | 532035.0 | 3569116.0 | 214.0 | -39.0 | 0.0 | ... | 0.000000 | 0.011259 | 0.014466 | -0.012261 | -0.006913 | 0.010572 | 0.008807 | 0.009066 | 0.071254 | -0.033384 | . 2020-11-23 33945.0 | 15287.0 | 4454.0 | 31481.0 | 2144660.0 | 536489.0 | 3600597.0 | 500.0 | 286.0 | 0.0 | ... | 0.000000 | 0.011068 | 0.014466 | -0.014914 | -0.009148 | 0.010220 | 0.008610 | 0.008907 | 0.069440 | -0.002281 | . 2020-11-24 34399.0 | 15838.0 | 4289.0 | 30622.0 | 2153815.0 | 540778.0 | 3631219.0 | 454.0 | -46.0 | 551.0 | ... | -34.285714 | 0.011030 | 0.011798 | -0.018819 | -0.011887 | 0.007764 | 0.008393 | 0.008732 | 0.069647 | 0.009789 | . 2020-11-25 34780.0 | 15838.0 | 4148.0 | 29972.0 | 2170097.0 | 544926.0 | 3661191.0 | 381.0 | -73.0 | 0.0 | ... | 0.000000 | 0.010729 | 0.011798 | -0.021594 | -0.013679 | 0.006909 | 0.008165 | 0.008548 | 0.068363 | -0.016845 | . 2020-11-26 35119.0 | 15838.0 | 4018.0 | 29310.0 | 2183660.0 | 548944.0 | 3690501.0 | 339.0 | -42.0 | 0.0 | ... | 0.000000 | 0.010259 | 0.011798 | -0.022577 | -0.014793 | 0.006370 | 0.007940 | 0.008363 | 0.067091 | -0.035686 | . 2020-11-27 35512.0 | 16402.0 | 3883.0 | 28648.0 | 2196119.0 | 552827.0 | 3719149.0 | 393.0 | 54.0 | 564.0 | ... | -27.571429 | 0.010194 | 0.009711 | -0.025716 | -0.016246 | 0.005656 | 0.007703 | 0.008173 | 0.067510 | 0.004736 | . 10 rows × 50 columns . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Dans ce graphe nous montrons les étâts les plus critiques de la maladie: les décès et les réanimations. Vu que chaque jour la donnée publiée est le nombre total de personne en réanimation, et que nous cherchons l&#39;évolution nous calculons la différence entre chaques jours. Il faut aussi prendre en compte qu&#39;un décès, de manière assez cynique &quot;libère&quot; un lit en réanimation. Pour éviter de voir une amélioration de la situation lorsque le taux de mortalité augmente, nous regardons aussi le &quot;solde vivant&quot; en réanimation: nombre entrant - nombre sortant vivant de réanimation. . Dynamique de l&#39;&#233;pid&#233;mie . Dans les graphiques qui suivent nous regardons sur l&#39;axe des abscisses le nombre de personnes dans un état donné de maladie COVID. Vous retrouvez ces valeurs sur le graphique de gauche. . Au milieu, l&#39;axe des ordonnées représente le changement de jour en jour de l&#39;axe des abscisses, les points indique les données brutes, et la ligne les données moyennées. . A droite, ces mêmes données de l&#39;axe des ordonnées sont normalisées pour indiquer un changement en pourcents par jour. . Chaque couleur correspond à une semaine. . def plots_maille_code(maille_active=&#39;FRA&#39;, **kwargs): fra = oc19_data_preproc(data, maille_active) plt.close() # plot_field_loops(fra, &quot;deces_ehpad&quot;, center=False, maille_active=maille_active) plot_field_loops(fra, &quot;hospitalises_cumul&quot;, [7], center=True, maille_active=maille_active, **kwargs) plot_field_loops(fra, &quot;reanimation_cumul&quot;, [7], center=True, maille_active=maille_active, **kwargs) plot_field_loops(fra, &quot;deces&quot;, center=True, maille_active=maille_active, **kwargs) if maille_active == &quot;FRA&quot;: plt.show() display(Markdown( &quot;Pour la France le nombre de cas peut-être analysé. Contrairement aux autres&quot; + &quot; quantités le nombre de cas est lissé sur 14 jours avec une fenêtre triangulaire.&quot; )) plot_field_loops( fra, &quot;cas_confirmes&quot;, [14], center=True, maille_active=maille_active, win_type=&#39;triang&#39;, **kwargs ) return fra . . _ = plots_maille_code(maille_active=&#39;FRA&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Pour la France le nombre de cas peut-être analysé. Contrairement aux autres quantités le nombre de cas est lissé sur 14 jours avec une fenêtre triangulaire. . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Il est intéressant de zoomer sur les données depuis la fin du confinement. . _ = plots_maille_code(maille_active=&#39;FRA&#39;, start_date=&#39;2020-05-18&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Pour la France le nombre de cas peut-être analysé. Contrairement aux autres quantités le nombre de cas est lissé sur 14 jours avec une fenêtre triangulaire. . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Ces courbes évoluent en boucles (ou en spirale en cas de plusieurs vagues successives) : . Au début de l&#39;épidémie les courbes commencent à l’origine ; | puis se suit une accélération rapide dans la partie supérieure du graphique ; | avec le confinement l&#39;augmentation de jour en jour ralenti, cela se voit à la pente négative dès la semaine du 23 Mars ; | l&#39;épidémie atteint son pic la semaine du 06 Avril ; | Nous voyons ensuite une réduction stable autour de 5% par jour jusqu&#39;à la semaine du 08 Juin ; | La période estivale indique bien que l&#39;épidémie n&#39;allait pas disparaître car ne retournant pas à l’origine ; | depuis le 15 Août le nombre de d&#39;hospitalisations et de réanimation s&#39;accroit et c&#39;est la deuxième semaine de Septembre qui semble indiqué qu&#39;une deuxième vague a commencé. | . Une deuxième vague se manifestera comme une spirale dans les graphiques au-dessus. . Dynamique en Ile de France . Ici les mêmes graphiques sont présentés pour l&#39;île de France. . _ = plots_maille_code(maille_active=&#39;REG-11&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; _ = plots_maille_code(maille_active=&#39;REG-11&#39;, start_date=&#39;2020-05-18&#39;) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Graphes par r&#233;gions . Pour chaque région les nombres de réanimation et de décès ainsi que leur dynamique sont présentées ci-dessous. . list_reg = [r for r in data[&quot;maille_code&quot;].unique() if &quot;REG&quot; in r] for reg in list_reg: oc19_data_preproc(data, reg) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;",
            "url": "https://payoto.github.io/blog/visualisation/data/covid/2020/09/13/visualisation-covid-en-france.html",
            "relUrl": "/visualisation/data/covid/2020/09/13/visualisation-covid-en-france.html",
            "date": " • Sep 13, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://payoto.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://payoto.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}